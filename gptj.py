from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

class GPTJChatbot:
    def __init__(self, model_name="EleutherAI/gpt-neo-2.7B"):
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForCausalLM.from_pretrained(model_name)
        self.model.eval()
        self.chat_history_ids = None
        self.max_history_tokens = 1024  # Limit history length to avoid excessive context size

    def generate_response(self, user_input):
        # Tokenize input text
        new_input_ids = self.tokenizer.encode(user_input + self.tokenizer.eos_token, return_tensors="pt")

        # Append the new user input tokens to the chat history
        if self.chat_history_ids is None:
            self.chat_history_ids = new_input_ids
        else:
            self.chat_history_ids = torch.cat([self.chat_history_ids, new_input_ids], dim=-1)

        # Truncate the chat history if it exceeds the max length
        if self.chat_history_ids.shape[-1] > self.max_history_tokens:
            self.chat_history_ids = self.chat_history_ids[:, -self.max_history_tokens:]

        # Generate response
        with torch.no_grad():
            output = self.model.generate(
                self.chat_history_ids,
                max_length=self.chat_history_ids.shape[-1] + 100,  # Limit the response length
                pad_token_id=self.tokenizer.eos_token_id,
                no_repeat_ngram_size=2,
                top_p=0.95,
                temperature=0.75,
                do_sample=True,
                attention_mask=(self.chat_history_ids != self.tokenizer.eos_token_id)
            )

        # Get the new tokens generated by the model
        response_ids = output[:, self.chat_history_ids.shape[-1]:]
        self.chat_history_ids = output

        # Decode the response tokens to string
        response = self.tokenizer.decode(response_ids[0], skip_special_tokens=True)
        return response

    def reset_chat(self):
        self.chat_history_ids = None

if __name__ == "__main__":
    chatbot = GPTJChatbot()
    while True:
        user_input = input("You: ")
        if user_input.lower() in ["exit", "quit"]:
            print("Goodbye!")
            break
        response = chatbot.generate_response(user_input)
        print("Chatbot:", response)
